module vga_display (
    input wire clk,
    input wire reset,
    output reg VGA_R0,
    output reg VGA_R1,
    output reg VGA_R2,
    output reg VGA_R3,
    output reg VGA_R4,
    output reg VGA_R5,
    output reg VGA_R6,
    output reg VGA_R7,
    output reg VGA_G0,
    output reg VGA_G1,
    output reg VGA_G2,
    output reg VGA_G3,
    output reg VGA_G4,
    output reg VGA_G5,
    output reg VGA_G6,
    output reg VGA_G7,
    output reg VGA_B0,
    output reg VGA_B1,
    output reg VGA_B2,
    output reg VGA_B3,
    output reg VGA_B4,
    output reg VGA_B5,
    output reg VGA_B6,
    output reg VGA_B7,
    output reg VGA_HS,
    output reg VGA_VS,
    output reg VGA_BLANK_N,
    output reg VGA_SYNC_N
);

    reg [9:0] h_count;
    reg [9:0] v_count;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            h_count <= 0;
            v_count <= 0;
            VGA_HS <= 1;
            VGA_VS <= 1;
            VGA_BLANK_N <= 1;
            VGA_SYNC_N <= 1;
          {VGA_R0, VGA_R1, VGA_R2, VGA_R3, VGA_R4, VGA_R5, VGA_R6, VGA_R7} <= 8'b00000000; // vermelhor
          {VGA_G0, VGA_G1, VGA_G2, VGA_G3, VGA_G4, VGA_G5, VGA_G6, VGA_G7} <= 8'b00000000; // verde
          {VGA_B0, VGA_B1, VGA_B2, VGA_B3, VGA_B4, VGA_B5, VGA_B6, VGA_B7} <= 8'b00000000; // azul
        end else begin
          if (h_count < 799) begin // mudar o h sync
                h_count <= h_count + 1;
            end else begin 
                h_count <= 0;
              if (v_count < 524) begin // mudar o vsync
                    v_count <= v_count + 1;
                end else begin
                    v_count <= 0;
                end
            end

          if (h_count < 1) begin // definir quebra de linha 
                VGA_HS <= 0;
            end else begin
                VGA_HS <= 1;
            end

          if (v_count < 1) begin // definir quebra de coluna 
                VGA_VS <= 0;
            end else begin
                VGA_VS <= 1;
            end

          if (h_count < 640 && v_count < 480) begin // Aqui Ã© para definir blank 
                VGA_BLANK_N <= 0;
            end else begin
                VGA_BLANK_N <= 1;
            end

            VGA_SYNC_N <= 1; // Verificar se deve ser 1 mesmo

            if (h_count < 160) begin
                {VGA_R0, VGA_R1, VGA_R2, VGA_R3, VGA_R4, VGA_R5, VGA_R6, VGA_R7} <= 8'b11111111;
                {VGA_G0, VGA_G1, VGA_G2, VGA_G3, VGA_G4, VGA_G5, VGA_G6, VGA_G7} <= 8'b00000000;
                {VGA_B0, VGA_B1, VGA_B2, VGA_B3, VGA_B4, VGA_B5, VGA_B6, VGA_B7} <= 8'b00000000;
            end else if (h_count < 320) begin
                {VGA_R0, VGA_R1, VGA_R2, VGA_R3, VGA_R4, VGA_R5, VGA_R6, VGA_R7} <= 8'b00000000;
                {VGA_G0, VGA_G1, VGA_G2, VGA_G3, VGA_G4, VGA_G5, VGA_G6, VGA_G7} <= 8'b00000000;
                {VGA_B0, VGA_B1, VGA_B2, VGA_B3, VGA_B4, VGA_B5, VGA_B6, VGA_B7} <= 8'b00000000;
            end else if (h_count < 480) begin
                {VGA_R0, VGA_R1, VGA_R2, VGA_R3, VGA_R4, VGA_R5, VGA_R6, VGA_R7} <= 8'b00000000;
                {VGA_G0, VGA_G1, VGA_G2, VGA_G3, VGA_G4, VGA_G5, VGA_G6, VGA_G7} <= 8'b11111111;
                {VGA_B0, VGA_B1, VGA_B2, VGA_B3, VGA_B4, VGA_B5, VGA_B6, VGA_B7} <= 8'b00000000;
            end else begin
                {VGA_R0, VGA_R1, VGA_R2, VGA_R3, VGA_R4, VGA_R5, VGA_R6, VGA_R7} <= 8'b00000000;
                {VGA_G0, VGA_G1, VGA_G2, VGA_G3, VGA_G4, VGA_G5, VGA_G6, VGA_G7} <= 8'b00000000;
                {VGA_B0, VGA_B1, VGA_B2, VGA_B3, VGA_B4, VGA_B5, VGA_B6, VGA_B7} <= 8'b11111111;
            end
        end
    end
endmodule